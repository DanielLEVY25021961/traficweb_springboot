# ############## application.properties de PROD ###############################
# ENCODE EN UTF-8.
# Fichier properties INTERNE de SPRING BOOT devant être inclus dans le classpath.
# Contient la configuration de l'application.

# port d'écoute du serveur TOMCAT
server.port=8081


# ********************
# DATASOURCE
# ********************
# Controle si la création du schéma et l'initialisation des tables doit s faire à partir de schema.sql et data.sql
# ATTENTION mettre spring.jpa.hibernate.ddl-auto=none si on veut utiliser la création du schéma et l'initialisation des tables avec schema.sql et data.sql
spring.datasource.initialization-mode=never
spring.batch.initialize-schema=never


# ===============================
# BASE DE DONNEES DE PROD POSTGRESQL
# ===============================
# permet de définir un schema-${platform}.sql pour la création du schéma et un data-${platform}.sql pour l'alimentation des tables
# ATTENTION mettre spring.jpa.hibernate.ddl-auto=none si on veut utiliser la création du schéma et l'initialisation des tables avec schema.sql et data.sql
#spring.datasource.platform=postgres

# driver de BD
spring.datasource.driver-class-name=org.postgresql.Driver
# URL de CONNEXION à la BD
spring.datasource.url=jdbc:postgresql://localhost:5432/base-traficweb_springboot
# Login + Mdp
spring.datasource.username=postgres
spring.datasource.password=postgres

# ===============================
# BASE DE DONNEES DE PROD H2
# ===============================
# permet de définir un schema-${platform}.sql pour la création du schéma et un data-${platform}.sql pour l'alimentation des tables
# ATTENTION mettre spring.jpa.hibernate.ddl-auto=none si on veut utiliser la création du schéma et l'initialisation des tables avec schema.sql et data.sql
#spring.datasource.platform=h2
### Enable H2 Console Access 
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

# driver de BD
#spring.datasource.driver-class-name=org.h2.Driver
# URL de CONNEXION à la BD
#spring.datasource.url=jdbc:h2:mem:base-traficweb_springboot;
#spring.datasource.url=jdbc:h2:mem:base-traficweb_springboot;DB_CLOSE_ON_EXIT=FALSE;AUTO_RECONNECT=TRUE;INIT=create schema if not exists \"public\"\; SET SCHEMA public;
# Chemin relatif (marche dans Eclipse)
#spring.datasource.url=jdbc:h2:file:./data/base-traficweb_springboot-h2/base-traficweb_springboot;DB_CLOSE_ON_EXIT=FALSE;IFEXISTS=TRUE;DB_CLOSE_DELAY=-1;
# Chemin absolu (marche dans la console H2)
#spring.datasource.url=jdbc:h2:file:D:/Donnees/eclipse/eclipseworkspace_oxygen/traficweb_springboot/data/base-traficweb_springboot-h2/base-traficweb_springboot;DB_CLOSE_ON_EXIT=FALSE;IFEXISTS=TRUE;DB_CLOSE_DELAY=-1;
# Login + Mdp
#spring.datasource.username=sa
#spring.datasource.password=sa


# ===============================
# JPA / HIBERNATE
# ===============================
# Dialecte Hibernate
# POSTGRESQL
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQL9Dialect
# H2
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect



#spring.datasource.initialization-mode=embedded

#VOIR LE SQL GENERE PAR HIBERNATE
#spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.show_sql=false

#FORMATER LE SQL GENERE PAR HIBERNATE
spring.jpa.properties.hibernate.format_sql=true

#COMMENTER LE SQL GENERE PAR HIBERNATE
spring.jpa.properties.hibernate.use_sql_comments=true


# STRATEGIE DE CONSERVATION DES TABLES
# Interrupteur général pour la création automatique du schéma par Hibernate
spring.jpa.generate-ddl=true
# CREATE-DROP : SUPPRIME et RECREE le schéma à chaque démarrage. SUPPRIME le schéma après la fermeture de l'application. PAR DEFAUT DANS SPRING.
# CREATE : SUPPRIME et RECREE le schéma de base de données au démarrage. Ne SUPPRIME PAS le schéma après fermeture de l'application.
# UPDATE : Met à jour le schéma (sans destruction de données) si modification d'une Entity.
# VALIDATE : VALIDE LE SCHEMA ET CONSERVE LES DONNEES. POUR LA PROD.
# NONE : empêche SPRING de créer automatiquement le SCHEMA.
spring.jpa.hibernate.ddl-auto=create


#**********************************************************
#hiérarchie des niveaux : FATAL>ERROR>WARN>INFO>DEBUG>TRACE 
#**********************************************************
# le niveau OFF permet de bloquer complètement un Logger.
# le niveau OFF permet de libérer complètement un Logger.
#**********************************************************

#************************************************
# 'log4j.debug=true' affiche des messages de débogage 
# indiquant les opération effectuées en interne
# par log4j
#------------------------------------------------
# log4j.debug=true

#**********************************************************
#hiérarchie des niveaux : FATAL>ERROR>WARN>INFO>DEBUG>TRACE 
#**********************************************************

# ================================================
# LOGGING ROOT
# ================================================
#logging.level.root=debug
logging.level.root=fatal

# logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} %-5level %logger{36} - %msg%n
logging.pattern.console="%d{yyyy-MMMM-dd HH:mm:ss} [%t] %-5level %logger{36} - %msg%n"



# ===============================
# LOGGING DE SPRING
# ===============================
#logging.level.org.springframework=debug
logging.level.org.springframework=info

# ===============================
# LOGGING D'HIBERNATE
# ===============================

#logging.level.org.hibernate.root=info
logging.level.org.hibernate.root=fatal

# logging du SQL
#logging.level.org.hibernate.SQL=debug
logging.level.org.hibernate.SQL=fatal

logging.level.org.hibernate.web=fatal
